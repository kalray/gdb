
load_generic_config "unix"
process_multilib_options ""

# The default compiler for this target.
set_board_info compiler "kvx-elf-gcc"

set timeout 100

# Can't do input (or output) in the current gdbserver.
set_board_info gdb,noinferiorio 1

# gdbserver does not intercept target file operations and perform them
# on the host.
set_board_info gdb,nofileio 1

set_board_info gdb,nosignals 1
set_board_info gdb,skip_huge_test 1
set_board_info gdb,timeout 100

set_board_info gdb_init_command "set kalray debug_agent_options \"--init-value=0\""

# function copied from gdb/testsuite/lib/gdb.exp with a few changes
#
# Generic run command.
#
# The second pattern below matches up to the first newline *only*.
# Using ``.*$'' could swallow up output that we attempt to match
# elsewhere.
#
# N.B. This function does not wait for gdb to return to the prompt,
# that is the caller's responsibility.

proc gdb_run_cmd {args} {
  global gdb_prompt use_gdb_stub

  foreach command [gdb_init_commands] {
    send_gdb "$command\n"
    gdb_expect 30 {
      -re "$gdb_prompt $" { }
      default {
        perror "gdb_init_command for target failed"
        return
      }
    }
  }

  if $use_gdb_stub {
    if [target_info exists gdb,do_reload_on_run] {
      if { [gdb_reload] != 0 } {
        return
      }
      send_gdb "continue\n"
      gdb_expect 60 {
        -re "Continu\[^\r\n\]*\[\r\n\]" {}
        default {}
      }
      return
    }

    if [target_info exists gdb,start_symbol] {
      set start [target_info gdb,start_symbol]
    } else {
      set start "start"
    }
    send_gdb  "jump *$start\n"
    set start_attempt 1
    while { $start_attempt } {
      # Cap (re)start attempts at three to ensure that this loop
      # always eventually fails.  Don't worry about trying to be
      # clever and not send a command when it has failed.
      if [expr $start_attempt > 3] {
        perror "Jump to start() failed (retry count exceeded)"
        return
      }
      set start_attempt [expr $start_attempt + 1]
      gdb_expect 30 {
        -re "Continuing at \[^\r\n\]*\[\r\n\]" {
          set start_attempt 0
        }
        -re "No symbol \"_start\" in current.*$gdb_prompt $" {
          perror "Can't find start symbol to run in gdb_run"
          return
        }
        -re "No symbol \"start\" in current.*$gdb_prompt $" {
          send_gdb "jump *_start\n"
        }
        -re "No symbol.*context.*$gdb_prompt $" {
          set start_attempt 0
        }
        -re "Line.* Jump anyway.*y or n. $" {
          send_gdb "y\n"
        }
        -re "The program is not being run.*$gdb_prompt $" {
          if { [gdb_reload] != 0 } {
            return
          }
          send_gdb "jump *$start\n"
        }
        timeout {
          perror "Jump to start() failed (timeout)"
          return
        }
      }
    }
    return
  }

  if [target_info exists gdb,do_reload_on_run] {
    if { [gdb_reload] != 0 } {
      return
    }
  }

  # [KVX] set the remote timeout for the cases when the machine
  # is very loaded
  send_gdb "set remotetimeout 20\n"
  gdb_expect 60 {
    -re ".*$gdb_prompt $" {
    }
  }

  send_gdb "run $args\n"

  # This doesn't work quite right yet.
  # Use -notransfer here so that test cases (like chng-sym.exp)
  # may test for additional start-up messages.
  gdb_expect 60 {
    -re "The program .* has been started already.*y or n. $" {
      send_gdb "y\n"
      exp_continue
    }
    -notransfer -re "Starting program: \[^\r\n\]*" {
        # [KVX] wait 60s for the prompt before returning to the
        # calling function that usually waits 10s to start,
        # which is not enough when the machine is very loaded
      gdb_expect 60 {
        -notransfer -re ".*$gdb_prompt $" {
        }
      }
    }
    -notransfer -re "$gdb_prompt $" {
    # There is no more input expected.
    }
  }
}
